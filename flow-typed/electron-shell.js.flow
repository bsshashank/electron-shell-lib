declare module 'electron-shell-lib' {

  /**
   *  a structure holding important
   *  application configuration
   */
  declare type ApplicationConfig = {
    app: {
      name: string,
      version: string
    },
    host: string,
    platform: string,
    defaultLocale: string,
    user: string,
    paths: {
      appPath: string,
      home: string,
      temp: string,
      data: string
    }
  }

  /**
   * a structure holding query options for the
   * document style database
   */
  declare type DocumentDatabaseQueryOptions = {
    reduce: boolean | string,
    include_docs: boolean,
    conflicts: boolean,
    attachments: boolean,
    startkey?: string,
    endkey?: string,
    limit?: number,
    skip?: number,
    descending: boolean,
    key?: string,
    keys?: Array<string>,
    group: boolean,
    group_level?: number
  }

  /**
   * a structure holding lookup options for the
   * document style database
   */
  declare type DocumentDatabaseLookupOptions = {
    rev?: string,
    revs: boolean,
    revs_info: boolean,
    conflicts: boolean,
    attachments: boolean
  }

  /**
   * an interface for accessing and manipulating
   * information in a document-style database
   *
   * @interface IDocumentDatabase
   */
  declare interface IDocumentDatabase {
    /**
     * stores a document object into the database
     *
     * @param {Object} doc the document that should be persisted into the database
     * @returns {Promise} a promise object signalling either success or failure of the operation
     *
     * @memberOf IDocumentDatabase
     */
    save(doc: Object): Promise<*>;

    /**
     * lookup a document from the database by it's unique id
     *
     * @param {string} id the unique id of the document to be retrieved
     * @param {DocumentDatabaseLookupOptions} options the options object with additional parameters for the database lookup
     * @returns {Promise} a promise object signalling either success or failure of the operation
     *
     * @memberOf IDocumentDatabase
     */
    lookup(id:string, options?:DocumentDatabaseLookupOptions): Promise<*>;

    /**
     * queries a specific view in the database with some search options
     *
     * @param {string} view the name of the view in the database to use
     * @param {DocumentDatabaseQueryOptions} options the options object with additional parameters for the querying the view
     * @returns {Promise} a promise object signalling either success or failure of the operation
     *
     * @memberOf IDocumentDatabase
     */
    query(view:string, options?:DocumentDatabaseQueryOptions): Promise<*>;

    /**
     * inserts multiple objects as bulk into the database
     *
     * @param {Array<Object>} docs the array of documents to insert into the database
     * @returns {Promise} a promise object signalling either success or failure of the operation
     *
     * @memberOf IDocumentDatabase
     */
    bulkInsert(docs:Array<Object>): Promise<*>;

    /**
     * removes an object from the database
     *
     * @param {string} id the unique id of the document to be removed
     * @returns {Promise} a promise object signalling either success or failure of the operation
     *
     * @memberOf IDocumentDatabase
     */
    remove(id:string): Promise<*>;
  }

  /**
   * an interface for accessing and manipulating
   * information in a sqlite-style database
   *
   * @interface ISqlDatabase
   */
  declare interface ISqlDatabase {

  }

  /**
   * an interface for accessing and manipulating
   * information in a graph-style database
   *
   * @interface ITripleStore
   */
  declare interface ITripleStore {

  }

  /**
   * a structure holding the result of iterating the file storage
   */
  declare type FileStorageIterationResult = {
    folder: string,
    name: string,
    ext: string,
    type: string
  }

  /**
   * an interface for accessing and manipulating
   * information in an extension-specific file storage
   *
   * @interface IFileStorage
   */
  declare interface IFileStorage {
    /**
     * a read-only property for getting the folder of the application
     *
     * @returns {string} the folder where the application resides
     */
    +appFolder: string;
    /**
     * a read-only property for getting the base folder for the extension-specific file storage
     *
     * @returns {string} the base folder for the extension-specific file storage
     */
    +baseFolder: string;
    /**
     * a read-only property for getting the temporary folder
     *
     * @returns {string} the temporary folder
     */
    +tempFolder: string;

    /**
     * iterates over the file storage base directory looking for files and folders matching the given pattern
     *
     * @param {string} pattern the pattern to look for in the base folder of the file storage
     * @returns {Promise} a promise object signalling either success or failure of the operation
     *
     * @memberOf IFileStorage
     */
    iterate(pattern:string): Promise<Array<FileStorageIterationResult>>;

    /**
     * uploads a file to the file storage
     *
     * @param {string} fileHandle the file object of the original file
     * @param {string} location the final location of the file in the file storage relative to the base folder
     * @returns {Promise} a promise object signalling either success or failure of the operation
     *
     * @memberOf IFileStorage
     */
    upload(fileHandle: File, location: string): Promise<*>;

    /**
     * downloads a file from the file storage
     *
     * @param {string} file the relative path to the file in the file storage
     * @param {string} location the location where to save the file to
     * @returns {Promise} a promise object signalling either success or failure of the operation
     *
     * @memberOf IFileStorage
     */
    download(file: string, location:string): Promise<*>;

    /**
     * delete a file from the file storage
     *
     * @param {string} file the relative path to the file in the file storage
     * @returns {Promise} a promise object signalling either success or failure of the operation
     *
     * @memberOf IFileStorage
     */
    delete(file: string): Promise<*>;

    /**
     * checks for the existene of a file or folder in the file storage
     *
     * @param {string} name the relative path to the file or folder in the file storage
     * @param {string} type the type to check for - either 'file' or 'folder'
     * @returns {boolean} a flag denoting whether the item exists or not
     *
     * @memberOf IFileStorage
     */
    exists(name:string, type: 'file' | 'folder'): boolean;

    /**
     * creates a file or folder in the file storage
     *
     * @param {string} name the relative path to the file or folder in the file storage
     * @param {string} type the type to check for - either 'file' or 'folder'
     * @returns {boolean} a flag denoting whether the item has been created or not
     *
     * @memberOf IFileStorage
     */
    create(name:string, type: 'file' | 'folder'): boolean;
  }

  /**
   * a structure defining an event in the application
   */
  declare type EventType = {
    severity: 'critical' | 'error' | 'warning' | 'info',
    issuer: string,
    description: string,
    timestamp: Date,
    type: 'event'
  }

  declare interface IActivityService {
    initialize(docDB: IDocumentDatabase): void;
    getByType(type: string): void;
    getByDateRange(from: Date, to: Date): void;
    getByIssuer(issuer: string): void;
    find(filter: Object): void;
    create(event: EventType): void;
  }

  declare type ExtensionInfoType = {
    _id: string,
    name: string,
    description: string,
    version: string,
    author: string,
    route: string,
    bannerImage: string,
    hasSettings: boolean,
    status: 'active' | 'deactive' | 'removed',
    type: 'extension'
  }

  declare interface IExtensionManager {
    initialize(fileStorage: IFileStorage, docDB: IDocumentDatabase, settingManager: ISettingManager, translationManager: ITranslationManager): void;
    mountAll(): void;
    activate(extName: string): void;
    deactivate(extName: string): void;
    install(extName: string, extPackage: File): void;
    uninstall(extName: string): void;
  }

  /**
   * a structure defining a setting in the application
   */
  declare type SettingType = {
    name: string,
    dataType: 'string' | 'number' | 'boolean',
    value: Object,
    type: 'setting'
  }

  declare interface ISettingManager {
    initialize(docDB: IDocumentDatabase): void;
    getByExtension(extension: string): void;
    update(setting: SettingType): void;
    import(settings: Array<SettingType>): void;
    export(): void;
  }

  /**
   * a structure defining a translation in the application
   */
  declare type TranslationType = {
    _id: string,
    description: string,
    defaultMessage: string,
    translation: string,
    locale: string,
    type: 'translation'
  }

  declare interface ITranslationManager {
    initialize(docDB: IDocumentDatabase): void;
    switchLocale(locale: string): void;
    update(locale: string, message: TranslationType): void;
    import(locale: string, messages: Array<TranslationType>): void;
    export(locale: string): void;
  }

  declare interface IExtension {
    register(settingsManager: ISettingManager, translationManager: ITranslationManager): Promise<*>;
    unregister(settingsManager: ISettingManager, translationManager: ITranslationManager): Promise<*>;
    initialize(fileStorage: IFileStorage, settings: Array<SettingType>): Promise<*>;
    +id: string;
    +name: string;
    +version: string;
    +description: string;
    +author: string;
    +bannerImage: string;
    +initialRoute: string;
    +mainView: React$Element<*>;
    +settingView: React$Element<*>;
  }
}
