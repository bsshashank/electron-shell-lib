 declare module 'electron-shell' {

  declare type ApplicationConfig = {
    app: {
      name: string,
      version: string
    },
    host: string,
    platform: string,
    defaultLocale: string,
    user: string,
    paths: {
      appPath: string,
      home: string,
      temp: string,
      data: string
    }
  }

  declare interface IDocumentDatabase {
    save (doc:Object): Promise<*>;
    get (id:string): Promise<*>;
    query (view:string, options:Object): Promise<*>;
    bulkInsert (docs:Array<Object>) : Promise<*>;
  }

  declare interface ISqlDatabase {

  }

  declare interface ITripleStore {

  }

  declare interface IFileStorage {
    appFolder: string;
    baseFolder: string;
    iterate(path:string, pattern:string): Promise<*>;
    upload(file: string): Promise<*>;
    download(file: string): Promise<*>;
    delete(file: string): Promise<*>;
  }

  declare type EventType = {
    severity: 'critical' | 'error' | 'warning' | 'info',
    issuer: string,
    description: string,
    timestamp: Date,
    type: 'event'
  }

  declare interface IActivityService {
    initialize(docDB:IDocumentDatabase): void;
    getByType (type:string): void;
    getByDateRange (from:Date, to:Date): void;
    getByIssuer (issuer:string): void;
    find (filter:Object): void;
    create (event:EventType): void;
  }

  declare interface IExtensionManager {
    initialize(fileStorage:IFileStorage, docDB:IDocumentDatabase): void;
    mountAll (): void;
    activate (extension:string): void;
    deactivate (extension:string): void;
    install (extension:string): void;
    uninstall (extension:string): void;
  }

  declare type SettingType = {
    name: string,
    dataType: 'string' | 'number' | 'boolean',
    value: Object,
    type: 'setting'
  }

  declare interface ISettingManager {
    initialize(docDB:IDocumentDatabase): void;
    getByExtension (extension:string): void;
    update (setting:SettingType): void;
    import (settings:Array<SettingType>): void;
    export (): void;
  }

  declare type TranslationType = {
    _id: string,
    description: string,
    defaultMessage: string,
    translation: string,
    locale: string,
    type: 'translation'
  }

  declare interface ITanslationManager {
    initialize(docDB:IDocumentDatabase): void;
    switchLocale (locale:string): void;
    update (locale:string, message:TranslationType): void;
    import (locale:string, messages:Array<TranslationType>): void;
    export (locale:string): void;
  }

  declare interface IExtension {
    register (settingsManager: ISettingManager, translationManager: ITranslationManager): void;
    unregister(settingsManager: ISettingManager, translationManager: ITranslationManager): void;
    initialize(fileStorage: IFileStorage, settings: Array<SettingType>): void;
    name: string;
    version: string;
    description: string;
    author: string;
    route: string;
    mainView: JSX.Element;
    settingView: JSX.Element;
  }
}
